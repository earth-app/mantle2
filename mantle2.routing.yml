# OpenAPI
mantle2.openapi:
  path: '/openapi'
  defaults:
    _controller: '\Drupal\mantle2\Controller\Schema\OpenAPIController::getSchema'
    _title: 'OpenAPI Schema'
  requirements:
    _access: 'TRUE'
  methods: [GET]
mantle2.swaggerui:
  path: '/swagger-ui'
  defaults:
    _controller: '\Drupal\mantle2\Controller\Schema\SwaggerUIController::getSwaggerUI'
    _title: 'Swagger UI'
  requirements:
    _access: 'TRUE'

# Routes
mantle2.hello:
  path: /v2/hello
  defaults:
    _controller: '\Drupal\mantle2\Controller\GeneralController::hi'
    _title: 'Hello!'
  requirements:
    _access: 'TRUE'
  options:
    tags: General
    description: Say hi to mantle2
    schema/200/type: text/plain
  methods: [GET]

mantle2.info:
  path: /v2/info
  defaults:
    _controller: '\Drupal\mantle2\Controller\GeneralController::getInfo'
    _title: 'Module Information'
  requirements:
    _access: 'TRUE'
  options:
    tags: General
    description: Retrieve information about the mantle2 Module
  methods: [GET]

## User Routes
mantle2.users:
  path: '/v2/users'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::users'
    _title: 'Retrieve User List'
  requirements:
    _access: 'TRUE'
  options:
    tags: Users
    description: Retrieves a list of Earth App users
    schema/200: users()
    schema/400: Invalid Pagination Parameters
    query:
      limit:
        type: integer
        minimum: 1
        maximum: 100
        default: 25
        description: The number of results to return per page
      page:
        type: integer
        minimum: 1
        default: 1
        description: The page number to retrieve
      search:
        type: string
        default: ''
        description: The search term to filter results
  methods: [GET]

mantle2.users.login:
  path: '/v2/users/login'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::login'
    _title: 'User Login'
  requirements:
    _access: 'TRUE'
  options:
    tags: Users
    description: 'Log in to your Earth App account'
    schema/200: loginResponse()
    schema/400: Invalid login credentials
    schema/401: Unauthorized
  methods: [POST]

mantle2.users.logout:
  path: '/v2/users/logout'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::logout'
    _title: 'User Logout'
  requirements:
    _access: 'TRUE'
  options:
    tags: Users
    description: Log out of your Earth App account
    schema/200: logoutResponse()
    schema/401: Unauthorized
  methods: [POST]

mantle2.users.create:
  path: '/v2/users/create'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::createUser'
    _title: 'Create User'
  requirements:
    _access: 'TRUE'
  options:
    tags: Users
    description: Sign up for an Earth App account
    schema/201: signupResponse()
    schema/400: Bad User Data
  methods: [POST]

#region User - By ID
mantle2.users.id.get:
  path: '/v2/users/{id}'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::getUser'
    _title: 'Retrieve User by ID'
  requirements:
    _access: 'TRUE'
    id: '\d+'
  options:
    tags: Users
    description: Retrieves user information by their identifier
    schema/200: user()
    schema/404: User not found
    parameters:
      id:
        type: string
  methods: [GET]

mantle2.users.id.patch:
  path: '/v2/users/{id}'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::patchUser'
    _title: 'Update User by ID'
  requirements:
    _access: 'TRUE'
    id: '\d+'
  options:
    tags: Users
    description: Updates user information by their identifier
    schema/200: user()
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    body/description: User data to update
    body/schema: userUpdateJson()
    parameters:
      id:
        type: string
  methods: [PATCH]

mantle2.users.id.delete:
  path: '/v2/users/{id}'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::deleteUser'
    _title: 'Delete User by ID'
  requirements:
    _access: 'TRUE'
    id: '\d+'
  options:
    tags: Users
    schema/204: User deleted successfully
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    parameters:
      id:
        type: string
  methods: [DELETE]

mantle2.users.id.patch_field_privacy:
  path: '/v2/users/{id}/field_privacy'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::patchFieldPrivacy'
    _title: 'Edit User Field Privacy by ID'
  requirements:
    _access: 'TRUE'
    id: '\d+'
  options:
    tags: Users
    description: Updates user field privacy settings by their identifier
    schema/200: user()
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    body/description: User privacy field options
    body/schema: userFieldPrivacyJson()
    parameters:
      id:
        type: string
  methods: [PATCH]

mantle2.users.id.get_profile_photo:
  path: '/v2/users/{id}/profile_photo'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::getProfilePhoto'
    _title: 'Get User Profile Photo by ID'
  requirements:
    _access: 'TRUE'
    id: '\d+'
  options:
    tags: Users
    description: Retrieves the profile photo of a user by their identifier
    schema/200/type: image/png
    schema/404: User not found
    parameters:
      id:
        type: string
  methods: [GET]

mantle2.users.id.set_profile_photo:
  path: '/v2/users/{id}/profile_photo'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::updateProfilePhoto'
    _title: 'Set User Profile Photo by ID'
  requirements:
    _access: 'TRUE'
    id: '\d+'
  options:
    tags: Users
    description: Updates the profile photo of a user by their identifier
    schema/200/type: image/png
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    parameters:
      id:
        type: string
  methods: [PUT]

mantle2.users.id.set_account_type:
  path: '/v2/users/{id}/account_type'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::setAccountType'
    _title: 'Set User Account Type by ID'
  requirements:
    _access: 'TRUE'
    id: '\d+'
  options:
    tags: Users
    description: Updates user account type by their identifier
    schema/200: user()
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    parameters:
      id:
        type: string
    query:
      account_type:
        type: enum
        required: true
        enum: [free, pro, writer, organizer, administrator]
        description: The account type to assign to the user
  methods: [PUT]

mantle2.users.id.activities:
  path: '/v2/users/{id}/activities'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::userActivities'
    _title: 'Get User Activities by ID'
  requirements:
    _access: 'TRUE'
    id: '\d+'
  options:
    tags: Users,Activities
    description: Retrieves user activities by their identifier
    schema/200: activitiesList()
    schema/404: User not found
    parameters:
      id:
        type: string
  methods: [GET]

mantle2.users.id.activities.set:
  path: '/v2/users/{id}/activities'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::setUserActivities'
    _title: 'Set User Activities by ID'
  requirements:
    _access: 'TRUE'
    id: '\d+'
  options:
    tags: Users,Activities
    description: Updates user activities by their identifier
    body/description: List of activity IDs to set for the user
    body/schema: activitiesIdList()
    schema/200: user()
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    parameters:
      id:
        type: string
  methods: [PATCH]

mantle2.users.id.activities.add:
  path: '/v2/users/{id}/activities'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::addUserActivity'
    _title: 'Add User Activity by ID'
  requirements:
    _access: 'TRUE'
    id: '\d+'
  options:
    tags: Users,Activities
    description: Updates user activities by their identifier
    schema/200: user()
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    schema/409: Activity already added to user
    query:
      activityId:
        type: string
        description: The ID of the activity to add for the user
    parameters:
      id:
        type: string
  methods: [PUT]

mantle2.users.id.activities.remove:
  path: '/v2/users/{id}/activities'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::removeUserActivity'
    _title: 'Remove User Activity by ID'
  requirements:
    _access: 'TRUE'
    id: '\d+'
    activityId: '\d+'
  options:
    tags: Users,Activities
    description: Removes a user activity by their identifier
    schema/200: user()
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User or activity not found
    parameters:
      id:
        type: string
    query:
      activityId:
        type: string
        description: The ID of the activity to remove for the user
  methods: [DELETE]

mantle2.users.id.friends:
  path: '/v2/users/{id}/friends'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::userFriends'
    _title: 'Get User Friends by ID'
  requirements:
    _access: 'TRUE'
    id: '\d+'
  options:
    tags: Users,Friends
    description: Retrieves user friends by their identifier
    schema/200: users()
    schema/400: Bad Request
    schema/404: User not found
    query:
      limit:
        type: integer
        minimum: 1
        maximum: 100
        default: 25
        description: The number of results to return per page
      page:
        type: integer
        minimum: 1
        default: 1
        description: The page number to retrieve
      search:
        type: string
        default: ''
        description: The search term to filter results
      filter:
        type: enum
        description: The type of friends to return. Mutual friends, added friends, or non-mutual friends (friends you have added that are not mutual).
        enum: [mutual, added, non_mutual]
    parameters:
      id:
        type: string
  methods: [GET]

mantle2.users.id.friends.add:
  path: '/v2/users/{id}/friends'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::addUserFriend'
    _title: 'Add User Friend by ID'
  requirements:
    _access: 'TRUE'
    id: '\d+'
  options:
    tags: Users,Friends
    description: Adds a friend for the user by their identifier
    schema/200: user()
    schema/400: Bad Request
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    schema/409: Friend already added
    parameters:
      id:
        type: string
    query:
      friend:
        type: string
        description: "The ID or Username of the friend to add for the user. Example: '1', '@friend'"
  methods: [PUT]

mantle2.users.id.friends.remove:
  path: '/v2/users/{id}/friends'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::removeUserFriend'
    _title: 'Remove User Friend by ID'
  requirements:
    _access: 'TRUE'
    id: '\d+'
  options:
    tags: Users,Friends
    description: Removes a friend for the user by their identifier
    schema/200: user()
    schema/400: Bad Request
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User or friend not found
    schema/409: Friend is not added
    parameters:
      id:
        type: string
    query:
      friend:
        type: string
        description: "The ID or Username of the friend to remove for the user. Example: '1', '@friend'"
  methods: [DELETE]

mantle2.users.id.circle:
  path: '/v2/users/{id}/circle'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::userCircle'
    _title: "Get User's Circle by ID"
  requirements:
    _access: 'TRUE'
    id: '\d+'
  options:
    tags: Users,Friends
    description: Retrieves a user's circle (their close friends) by their identifier
    schema/200: users()
    schema/400: Bad Request
    schema/404: User not found
    query:
      limit:
        type: integer
        minimum: 1
        maximum: 100
        default: 25
        description: The number of results to return per page
      page:
        type: integer
        minimum: 1
        default: 1
        description: The page number to retrieve
      search:
        type: string
        default: ''
        description: The search term to filter results
    parameters:
      id:
        type: string
  methods: [GET]

mantle2.users.id.circle.add:
  path: '/v2/users/{id}/circle'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::addUserToCircle'
    _title: "Add User to Circle by User's ID"
  requirements:
    _access: 'TRUE'
    id: '\d+'
  options:
    tags: Users,Friends
    description: Adds a user to their circle by their identifier
    schema/200: user()
    schema/400: Bad Request
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    schema/409: Friend already added
    parameters:
      id:
        type: string
    query:
      friend:
        type: string
        description: "The ID or Username of the friend to add for the user. Example: '1', '@friend'"
  methods: [PUT]

mantle2.users.id.circle.remove:
  path: '/v2/users/{id}/circle'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::removeUserFromCircle'
    _title: "Remove User from Circle by User's ID"
  requirements:
    _access: 'TRUE'
    id: '\d+'
  options:
    tags: Users,Friends
    description: Removes a user from their circle by their identifier
    schema/200: user()
    schema/400: Bad Request
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User or friend not found
    schema/409: Friend is not added
    parameters:
      id:
        type: string
    query:
      friend:
        type: string
        description: "The ID or Username of the friend to remove for the user. Example: '1', '@friend'"
  methods: [DELETE]

#endregion
#region User - By Username

mantle2.users.username.get:
  path: '/v2/users/{username}'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::getUser'
    _title: 'Retrieve User by Username'
  requirements:
    _access: 'TRUE'
    username: '@\w+'
  options:
    tags: Users
    description: Retrieves user information by their username
    schema/200: user()
    schema/404: User not found
    parameters:
      username:
        type: string
  methods: [GET]

mantle2.users.username.patch:
  path: '/v2/users/{username}'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::patchUser'
    _title: 'Update User by Username'
  requirements:
    _access: 'TRUE'
    username: '@\w+'
  options:
    tags: Users
    description: Updates user information by their username
    schema/200: user()
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    body/description: User data to update
    body/schema: userUpdateJson()
    parameters:
      username:
        type: string
  methods: [PATCH]

mantle2.users.username.delete:
  path: '/v2/users/{username}'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::deleteUser'
    _title: 'Delete User by Username'
  requirements:
    _access: 'TRUE'
    username: '@\w+'
  options:
    tags: Users
    schema/204: User deleted successfully
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    parameters:
      username:
        type: string
  methods: [DELETE]

mantle2.users.username.patch_field_privacy:
  path: '/v2/users/{username}/field_privacy'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::patchFieldPrivacy'
    _title: 'Edit User Field Privacy by Username'
  requirements:
    _access: 'TRUE'
    username: '@\w+'
  options:
    tags: Users
    description: Updates user field privacy settings by their username
    schema/200: user()
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    body/description: User privacy field options
    body/schema: userFieldPrivacyJson()
    parameters:
      username:
        type: string
  methods: [PATCH]

mantle2.users.username.get_profile_photo:
  path: '/v2/users/{username}/profile_photo'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::getProfilePhoto'
    _title: 'Get User Profile Photo by Username'
  requirements:
    _access: 'TRUE'
    username: '@\w+'
  options:
    tags: Users
    description: Retrieves the profile photo of a user by their username
    schema/200/type: image/png
    schema/404: User not found
    parameters:
      username:
        type: string
  methods: [GET]

mantle2.users.username.set_profile_photo:
  path: '/v2/users/{username}/profile_photo'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::updateProfilePhoto'
    _title: 'Set User Profile Photo by Username'
  requirements:
    _access: 'TRUE'
    username: '@\w+'
  options:
    tags: Users
    description: Updates the profile photo of a user by their username
    schema/200/type: image/png
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    parameters:
      username:
        type: string
  methods: [PUT]

mantle2.users.username.set_account_type:
  path: '/v2/users/{username}/account_type'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::setAccountType'
    _title: 'Set User Account Type by Username'
  requirements:
    _access: 'TRUE'
    username: '@\w+'
  options:
    tags: Users
    description: Updates user account type by their username
    schema/200: user()
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    parameters:
      username:
        type: string
    query:
      account_type:
        type: enum
        required: true
        enum: [free, pro, writer, organizer, administrator]
        description: The account type to assign to the user
  methods: [PUT]

mantle2.users.username.activities:
  path: '/v2/users/{username}/activities'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::userActivities'
    _title: 'Get User Activities by Username'
  requirements:
    _access: 'TRUE'
    username: '@\w+'
  options:
    tags: Users,Activities
    description: Retrieves user activities by their username
    schema/200: activitiesList()
    schema/404: User not found
    parameters:
      username:
        type: string
  methods: [GET]

mantle2.users.username.activities.set:
  path: '/v2/users/{username}/activities'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::setUserActivities'
    _title: 'Set User Activities by Username'
  requirements:
    _access: 'TRUE'
    username: '@\w+'
  options:
    tags: Users,Activities
    description: Updates user activities by their username
    body/description: List of activity IDs to set for the user
    body/schema: activitiesIdList()
    schema/200: user()
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    parameters:
      username:
        type: string
  methods: [PATCH]

mantle2.users.username.activities.add:
  path: '/v2/users/{username}/activities'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::addUserActivity'
    _title: 'Add User Activity by Username'
  requirements:
    _access: 'TRUE'
    username: '@\w+'
  options:
    tags: Users,Activities
    description: Updates user activities by their username
    schema/200: user()
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    schema/409: Activity already added to user
    query:
      activityId:
        type: string
        description: The ID of the activity to add for the user
    parameters:
      username:
        type: string
  methods: [PUT]

mantle2.users.username.activities.remove:
  path: '/v2/users/{username}/activities'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::removeUserActivity'
    _title: 'Remove User Activity by Username'
  requirements:
    _access: 'TRUE'
    username: '@\w+'
    activityId: '\d+'
  options:
    tags: Users,Activities
    description: Removes a user activity by their identifier
    schema/200: user()
    schema/400: Bad Request
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User or activity not found
    parameters:
      username:
        type: string
    query:
      activityId:
        type: string
        description: The ID of the activity to remove for the user
  methods: [DELETE]

mantle2.users.username.friends:
  path: '/v2/users/{username}/friends'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::userFriends'
    _title: 'Get User Friends by Username'
  requirements:
    _access: 'TRUE'
    username: '@\w+'
  options:
    tags: Users,Friends
    description: Retrieves user friends by their username
    schema/200: users()
    schema/400: Bad Request
    schema/404: User not found
    query:
      limit:
        type: integer
        minimum: 1
        maximum: 100
        default: 25
        description: The number of results to return per page
      page:
        type: integer
        minimum: 1
        default: 1
        description: The page number to retrieve
      search:
        type: string
        default: ''
        description: The search term to filter results
      filter:
        type: enum
        description: The type of friends to return. Mutual friends, added friends, or non-mutual friends (friends you have added that are not mutual).
        enum: [mutual, added, non_mutual]
    parameters:
      username:
        type: string
  methods: [GET]

mantle2.users.username.friends.add:
  path: '/v2/users/{username}/friends'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::addUserFriend'
    _title: 'Add User Friend by Username'
  requirements:
    _access: 'TRUE'
    username: '@\w+'
  options:
    tags: Users,Friends
    description: Adds a friend for the user by their username
    schema/200: user()
    schema/400: Bad Request
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    schema/409: Friend already added
    parameters:
      username:
        type: string
    query:
      friend:
        type: string
        description: "The ID or Username of the friend to add for the user. Example: '1', '@friend'"
  methods: [PUT]

mantle2.users.username.friends.remove:
  path: '/v2/users/{username}/friends'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::removeUserFriend'
    _title: 'Remove User Friend by Username'
  requirements:
    _access: 'TRUE'
    username: '@\w+'
  options:
    tags: Users,Friends
    description: Removes a friend for the user by their username
    schema/200: user()
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User or friend not found
    schema/409: Friend is not added
    parameters:
      username:
        type: string
    query:
      friend:
        type: string
        description: "The ID or Username of the friend to remove for the user. Example: '1', '@friend'"
  methods: [DELETE]

mantle2.users.username.circle:
  path: '/v2/users/{username}/circle'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::userCircle'
    _title: "Get User's Circle by Username"
  requirements:
    _access: 'TRUE'
    username: '@\w+'
  options:
    tags: Users,Friends
    description: Retrieves a user's circle (their close friends) by their username
    schema/200: users()
    schema/400: Bad Request
    schema/404: User not found
    query:
      limit:
        type: integer
        minimum: 1
        maximum: 100
        default: 25
        description: The number of results to return per page
      page:
        type: integer
        minimum: 1
        default: 1
        description: The page number to retrieve
      search:
        type: string
        default: ''
        description: The search term to filter results
    parameters:
      username:
        type: string
  methods: [GET]

mantle2.users.username.circle.add:
  path: '/v2/users/{username}/circle'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::addUserToCircle'
    _title: "Add User to Circle by User's Username"
  requirements:
    _access: 'TRUE'
    username: '@\w+'
  options:
    tags: Users,Friends
    description: Adds a user to their circle by their username
    schema/200: user()
    schema/400: Bad Request
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    schema/409: Friend already added
    parameters:
      username:
        type: string
    query:
      friend:
        type: string
        description: "The ID or Username of the friend to add for the user. Example: '1', '@friend'"
  methods: [PUT]

mantle2.users.username.circle.remove:
  path: '/v2/users/{username}/circle'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::removeUserFromCircle'
    _title: "Remove User from Circle by User's Username"
  requirements:
    _access: 'TRUE'
    username: '@\w+'
  options:
    tags: Users,Friends
    description: Removes a user from their circle by their username
    schema/200: user()
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User or friend not found
    schema/409: Friend is not added
    parameters:
      username:
        type: string
    query:
      friend:
        type: string
        description: "The ID or Username of the friend to remove for the user. Example: '1', '@friend'"
  methods: [DELETE]

#endregion
#region User - Current User

mantle2.users.current.get:
  path: '/v2/users/current'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::getUser'
    _title: 'Retrieve Current User'
  requirements:
    _access: 'TRUE'
  options:
    tags: Users
    description: Retrieves the current user according to the session ID
    schema/200: user()
    schema/401: Unauthorized
    schema/404: User not found
  methods: [GET]

mantle2.users.current.patch:
  path: '/v2/users/current'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::patchUser'
    _title: 'Update Current User'
  requirements:
    _access: 'TRUE'
  options:
    tags: Users
    description: Updates the current user according to the session ID
    schema/200: user()
    schema/400: Bad Request
    schema/404: User not found
    body/description: User data to update
    body/schema: userUpdateJson()
  methods: [PATCH]

mantle2.users.current.delete:
  path: '/v2/users/current'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::deleteUser'
    _title: 'Delete Current User'
  requirements:
    _access: 'TRUE'
  options:
    tags: Users
    description: Deletes the current user according to the session ID
    schema/401: Unauthorized
    schema/204: User deleted successfully
  methods: [DELETE]

mantle2.users.current.patch_field_privacy:
  path: '/v2/users/current/field_privacy'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::patchFieldPrivacy'
    _title: 'Edit Current User Field Privacy'
  requirements:
    _access: 'TRUE'
  options:
    tags: Users
    description: Updates user field privacy settings according to the session ID
    schema/200: user()
    schema/401: Unauthorized
    schema/404: User not found
    body/description: User privacy field options
    body/schema: userFieldPrivacyJson()
  methods: [PATCH]

mantle2.users.current.get_profile_photo:
  path: '/v2/users/current/profile_photo'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::getProfilePhoto'
    _title: 'Get Current User Profile Photo'
  requirements:
    _access: 'TRUE'
  options:
    tags: Users
    description: Retrieves the profile photo of a user according to the session ID
    schema/200/type: image/png
    schema/404: User not found
  methods: [GET]

mantle2.users.current.set_profile_photo:
  path: '/v2/users/current/profile_photo'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::updateProfilePhoto'
    _title: 'Set Current User Profile Photo'
  requirements:
    _access: 'TRUE'
  options:
    tags: Users
    description: Updates the profile photo of a user according to the session ID
    schema/200/type: image/png
    schema/401: Unauthorized
    schema/404: User not found
  methods: [PUT]

mantle2.users.current.set_account_type:
  path: '/v2/users/current/account_type'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::setAccountType'
    _title: 'Set Current User Account Type'
  requirements:
    _access: 'TRUE'
  options:
    tags: Users
    description: Updates user account type according to the session ID
    schema/200: user()
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    query:
      account_type:
        type: enum
        required: true
        enum: [free, pro, writer, organizer, administrator]
        description: The account type to assign to the user
  methods: [PUT]

mantle2.users.current.activities:
  path: '/v2/users/current/activities'
  defaults:
    controller: '\Drupal\mantle2\Controller\UsersController::userActivities'
    _title: 'Get Current User Activities'
  requirements:
    _access: 'TRUE'
  options:
    tags: Users,Activities
    description: Retrieves user activities according to the session ID
    schema/200: activitiesList()
    schema/401: Unauthorized
    schema/404: User not found
  methods: [GET]

mantle2.users.current.activities.set:
  path: '/v2/users/current/activities'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::setUserActivities'
    _title: 'Set Current User Activities'
  requirements:
    _access: 'TRUE'
  options:
    tags: Users,Activities
    description: Updates user activities according to the session ID
    body/description: List of activity IDs to set for the user
    body/schema: activitiesIdList()
    schema/200: user()
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
  methods: [PATCH]

mantle2.users.current.activities.add:
  path: '/v2/users/current/activities'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::addUserActivity'
    _title: 'Add Activity to Current User'
  requirements:
    _access: 'TRUE'
  options:
    tags: Users,Activities
    description: Updates user activities according to the session ID
    schema/200: user()
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    schema/409: Activity already added to user
    query:
      activityId:
        type: string
        description: The ID of the activity to add for the user
  methods: [PUT]

mantle2.users.current.activities.remove:
  path: '/v2/users/current/activities'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::removeUserActivity'
    _title: 'Remove Activity from Current User'
  requirements:
    _access: 'TRUE'
    activityId: '\d+'
  options:
    tags: Users,Activities
    description: Removes a user activity by their identifier
    schema/200: user()
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User or activity not found
    query:
      activityId:
        type: string
        description: The ID of the activity to remove for the user
  methods: [DELETE]

mantle2.users.current.friends:
  path: '/v2/users/current/friends'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::userFriends'
    _title: 'Get Current User Friends'
  requirements:
    _access: 'TRUE'
  options:
    tags: Users,Friends
    description: Retrieves user friends according to the session ID
    schema/200: users()
    schema/400: Bad Request
    schema/401: Unauthorized
    schema/404: User not found
    query:
      limit:
        type: integer
        minimum: 1
        maximum: 100
        default: 25
        description: The number of results to return per page
      page:
        type: integer
        minimum: 1
        default: 1
        description: The page number to retrieve
      search:
        type: string
        default: ''
        description: The search term to filter results
      filter:
        type: enum
        description: The type of friends to return. Mutual friends, added friends, or non-mutual friends (friends you have added that are not mutual).
        enum: [mutual, added, non_mutual]
  methods: [GET]

mantle2.users.current.friends.add:
  path: '/v2/users/current/friends'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::addUserFriend'
    _title: 'Add Friend to Current User'
  requirements:
    _access: 'TRUE'
  options:
    tags: Users,Friends
    description: Adds a friend for the user based on the session ID
    schema/200: user()
    schema/400: Bad Request
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    schema/409: Friend already added
    query:
      friend:
        type: string
        description: "The ID or Username of the friend to add for the user. Example: '1', '@friend'"
  methods: [PUT]

mantle2.users.current.friends.remove:
  path: '/v2/users/current/friends'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::removeUserFriend'
    _title: 'Remove Friend from Current User'
  requirements:
    _access: 'TRUE'
  options:
    tags: Users,Friends
    description: Removes a friend for the user based on the session ID
    schema/200: user()
    schema/400: Bad Request
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User or friend not found
    query:
      friend:
        type: string
        description: "The ID or Username of the friend to remove for the user. Example: '1', '@friend'"
  methods: [DELETE]

mantle2.users.current.circle:
  path: '/v2/users/current/circle'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::userCircle'
    _title: "Get Current User's Circle"
  requirements:
    _access: 'TRUE'
  options:
    tags: Users,Friends
    description: Retrieves a user's circle (their close friends) according to the session ID
    schema/200: users()
    schema/400: Bad Request
    schema/401: Unauthorized
    schema/404: User not found
    query:
      limit:
        type: integer
        minimum: 1
        maximum: 100
        default: 25
        description: The number of results to return per page
      page:
        type: integer
        minimum: 1
        default: 1
        description: The page number to retrieve
      search:
        type: string
        default: ''
        description: The search term to filter results
  methods: [GET]

mantle2.users.current.circle.add:
  path: '/v2/users/current/circle'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::addUserToCircle'
    _title: "Add User to Current User's Circle"
  requirements:
    _access: 'TRUE'
  options:
    tags: Users,Friends
    description: Adds a user to the current user's circle based on the session ID
    schema/200: user()
    schema/400: Bad Request
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User not found
    schema/409: Friend already added
    query:
      friend:
        type: string
        description: "The ID or Username of the friend to add for the user. Example: '1', '@friend'"
  methods: [PUT]

mantle2.users.current.circle.remove:
  path: '/v2/users/current/circle'
  defaults:
    _controller: '\Drupal\mantle2\Controller\UsersController::removeUserFromCircle'
    _title: 'Remove User from Current User Circle'
  requirements:
    _access: 'TRUE'
  options:
    tags: Users,Friends
    description: Removes a user from the current user's circle based on the session ID
    schema/200: user()
    schema/400: Bad Request
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: User or friend not found
    query:
      friend:
        type: string
        description: "The ID or Username of the friend to remove for the user. Example: '1', '@friend'"
  methods: [DELETE]

#endregion

## Activity Routes
mantle2.activities:
  path: '/v2/activities'
  defaults:
    _controller: '\Drupal\mantle2\Controller\ActivityController::activities'
    _title: 'List Activities'
  requirements:
    _access: 'TRUE'
  options:
    tags: Activities
    description: Retrieves a list of activities
    schema/200: activities()
    schema/401: Unauthorized
  methods: [GET]

mantle2.activities.random:
  path: '/v2/activities/random'
  defaults:
    _controller: '\Drupal\mantle2\Controller\ActivityController::randomActivity'
    _title: 'Get Random Activity'
  requirements:
    _access: 'TRUE'
  options:
    tags: Activities
    description: Retrieves a random activity
    schema/200: activity()
    schema/404: Activity not found
  methods: [GET]

mantle2.activities.get:
  path: '/v2/activities/{activityId}'
  defaults:
    _controller: '\Drupal\mantle2\Controller\ActivityController::getActivity'
    _title: 'Get Activity'
  requirements:
    _access: 'TRUE'
    activityId: \s+
  options:
    tags: Activities
    description: Retrieves a specific activity by ID
    schema/200: activity()
    schema/404: Activity not found
    parameters:
      activityId:
        type: string
        description: The ID of the activity to retrieve
  methods: [GET]

mantle2.activities.create:
  path: '/v2/activities'
  defaults:
    _controller: '\Drupal\mantle2\Controller\ActivityController::createActivity'
    _title: 'Create Activity [Admin Only]'
  requirements:
    _access: 'TRUE'
  options:
    tags: Activities
    description: Creates a new activity
    schema/201: activity()
    schema/400: Bad Request
    schema/401: Unauthorized
    schema/403: Forbidden
  methods: [POST]

## Event Routes

mantle2.events:
  path: '/v2/events'
  defaults:
    _controller: '\Drupal\mantle2\Controller\EventsController::events'
    _title: 'List Events'
  requirements:
    _access: 'TRUE'
  options:
    tags: Events
    description: Retrieves a list of events
    schema/200: events()
    schema/400: Invalid Pagination Parameters
    schema/401: Unauthorized
    query:
      limit:
        type: integer
        minimum: 1
        maximum: 100
        default: 25
        description: The number of results to return per page
      page:
        type: integer
        minimum: 1
        default: 1
        description: The page number to retrieve
      search:
        type: string
        default: ''
        description: The search term to filter results
  methods: [GET]

mantle2.events.create:
  path: '/v2/events'
  defaults:
    _controller: '\Drupal\mantle2\Controller\EventsController::createEvent'
    _title: 'Create Event'
  requirements:
    _access: 'TRUE'
  options:
    tags: Events
    description: Creates a new event
    schema/201: event()
    schema/400: Bad Request
    schema/401: Unauthorized
    schema/403: Forbidden
    body/schema: eventCreate()
    body/description: Event data to create
  methods: [POST]

mantle2.events.get:
  path: '/v2/events/{eventId}'
  defaults:
    _controller: '\Drupal\mantle2\Controller\EventsController::getEvent'
    _title: 'Get Event'
  requirements:
    _access: 'TRUE'
    eventId: \d+
  options:
    tags: Events
    description: Retrieves a specific event by ID
    schema/200: event()
    schema/404: Event not found
    parameters:
      eventId:
        type: integer
        description: The ID of the event to retrieve
  methods: [GET]

mantle2.events.update:
  path: '/v2/events/{eventId}'
  defaults:
    _controller: '\Drupal\mantle2\Controller\EventsController::updateEvent'
    _title: 'Update Event'
  requirements:
    _access: 'TRUE'
    eventId: \d+
  options:
    tags: Events
    description: Updates an existing event
    schema/200: event()
    schema/400: Bad Request
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: Event not found
    body/description: Event data to update
    body/schema: eventUpdate()
    parameters:
      eventId:
        type: integer
        description: The ID of the event to update
  methods: [PATCH]

mantle2.events.delete:
  path: '/v2/events/{eventId}'
  defaults:
    _controller: '\Drupal\mantle2\Controller\EventsController::deleteEvent'
    _title: 'Delete Event'
  requirements:
    _access: 'TRUE'
    eventId: \d+
  options:
    tags: Events
    description: Deletes an existing event
    schema/204: Event deleted successfully
    schema/400: Bad Request
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: Event not found
    parameters:
      eventId:
        type: integer
        description: The ID of the event to delete
  methods: [DELETE]

mantle2.events.get.attendees:
  path: '/v2/events/{eventId}/attendees'
  defaults:
    _controller: '\Drupal\mantle2\Controller\EventsController::getEventAttendees'
    _title: 'Get Event Attendees'
  requirements:
    _access: 'TRUE'
    eventId: \d+
  options:
    tags: Events
    description: Retrieves a list of attendees for a specific event
    schema/200: users()
    schema/404: Event not found
    parameters:
      eventId:
        type: integer
        description: The ID of the event to retrieve attendees for
    query:
      limit:
        type: integer
        minimum: 1
        maximum: 100
        default: 25
        description: The number of results to return per page
      page:
        type: integer
        minimum: 1
        default: 1
        description: The page number to retrieve
      search:
        type: string
        default: ''
        description: The search term to filter results
  methods: [GET]

mantle2.events.signup:
  path: '/v2/events/{eventId}/signup'
  defaults:
    _controller: '\Drupal\mantle2\Controller\EventsController::signupForEvent'
    _title: 'Sign Up for Event'
  requirements:
    _access: 'TRUE'
    eventId: \d+
  options:
    tags: Events
    description: Signs up the logged in user for a specific event
    schema/200: attendeeResponse()
    schema/400: Bad Request
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: Event not found
    parameters:
      eventId:
        type: integer
        description: The ID of the event to sign up for
  methods: [POST]

mantle2.events.leave:
  path: '/v2/events/{eventId}/leave'
  defaults:
    _controller: '\Drupal\mantle2\Controller\EventsController::leaveEvent'
    _title: 'Cancel Signup for Event'
  requirements:
    _access: 'TRUE'
    eventId: \d+
  options:
    tags: Events
    description: Cancels the logged in user's signup for a specific event
    schema/200: attendeeResponse()
    schema/400: Bad Request
    schema/401: Unauthorized
    schema/403: Forbidden
    schema/404: Event not found
    parameters:
      eventId:
        type: integer
        description: The ID of the event to cancel signup for
  methods: [POST]
