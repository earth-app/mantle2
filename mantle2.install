<?php

use Drupal\node\Entity\NodeType;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\mantle2\Controller\Schema\Mantle2Schemas;
use Drupal\mantle2\Custom\EventType;
use Drupal\mantle2\Custom\Visibility;
use Drupal\mantle2\Service\UsersHelper;

function createField(
	string $entity,
	string $name,
	string $type,
	string $label,
	bool $required = false,
	$default_value = null,
	array $settings = [],
	array $constraints = [],
	int $cardinality = 1,
	?string $bundle = null,
) {
	// If no bundle is provided, default to entity (e.g., user entity uses 'user' bundle).
	$bundle = $bundle ?? $entity;
	if (!FieldStorageConfig::loadByName($entity, $name)) {
		FieldStorageConfig::create([
			'field_name' => $name,
			'entity_type' => $entity,
			'type' => $type,
			'cardinality' => $cardinality,
			'settings' => $settings,
			'default_value' => $default_value !== null ? ['value' => $default_value] : null,
		])->save();
	}

	if (!FieldConfig::loadByName($entity, $bundle, $name)) {
		FieldConfig::create([
			'field_name' => $name,
			'entity_type' => $entity,
			'bundle' => $bundle,
			'label' => $label,
			'required' => $required,
		])->save();
	}

	if ($constraints) {
		$field = \Drupal\field\Entity\FieldConfig::load("$entity.$bundle.$name");
		if ($field) {
			$field->setSetting('constraints', $constraints);
			$field->save();
		}
	}
}

function createContentType(string $name, string $label, string $description, array $fields)
{
	// Ensure the content type (bundle) exists.
	$existing = NodeType::load($name);
	if (!$existing) {
		$type = NodeType::create([
			'type' => $name,
			'name' => $label,
			'description' => $description,
		]);
		$type->save();
	}

	// Add fields to the 'node' entity for this bundle.
	foreach ($fields as $field) {
		createField(
			'node', // Correct entity type for nodes
			$field['name'],
			$field['type'],
			$field['label'],
			$field['required'] ?? false,
			$field['default_value'] ?? null,
			$field['settings'] ?? [],
			$field['constraints'] ?? [],
			$field['cardinality'] ?? 1,
			$name, // bundle: machine name of the content type
		);
	}
}

function mantle2_install()
{
	// User Fields

	/// Visibility
	createField('user', 'field_visibility', 'list_string', 'Visibility', true, null, [
		'allowed_values' => array_map(fn($case) => $case->value, Visibility::cases()),
	]);

	/// Field Privacy
	createField(
		'user',
		'field_privacy',
		'json',
		'Field Privacy',
		true,
		json_encode(UsersHelper::$defaultPrivacy),
		[
			'schema' => Mantle2Schemas::userFieldPrivacyJson(),
		],
	);

	/// First Name
	createField('user', 'field_first_name', 'string', 'First Name', false, '', [
		'max_length' => 50,
	]);

	/// Last Name
	createField('user', 'field_last_name', 'string', 'Last Name', false, '', [
		'max_length' => 50,
	]);

	/// Bio
	createField(
		'user',
		'field_bio',
		'text_long',
		'Biography',
		false,
		'',
		[
			'max_length' => 700,
		],
		[],
		1,
	);

	/// Phone Number
	createField(
		'user',
		'field_phone',
		'integer',
		'Phone Number',
		false,
		0,
		[
			'min' => 0,
			'max' => 9999999999,
		],
		[
			'Regex' => [
				'pattern' => '/^\+?[0-9]{7,15}$/',
				'message' => 'Enter a valid phone number.',
			],
		],
	);

	/// Country
	createField(
		'user',
		'field_country',
		'string',
		'Country',
		false,
		'US',
		[
			'max_length' => 2,
		],
		[
			'Regex' => [
				'pattern' => '[A-Z]{2}',
				'message' => 'Enter a valid country code.',
			],
		],
	);

	/// Address
	createField('user', 'field_address', 'string', 'Address', false, '', [
		'max_length' => 255,
	]);

	/// Activities
	createField('user', 'field_activities', 'json', 'Activities', false, json_encode([]), [
		'schema' => Mantle2Schemas::activitiesJson(),
	]);

	/// Friends
	createField('user', 'field_friends', 'json', 'Friends', false, json_encode([]), [
		'schema' => [
			'$schema' => 'http://json-schema.org/draft-07/schema#',
			'type' => 'array',
			'items' => [
				'type' => 'string',
				'format' => 'number',
			],
		],
	]);

	/// Circle
	createField('user', 'field_circle', 'json', 'Circle', false, json_encode([]), [
		'schema' => [
			'$schema' => 'http://json-schema.org/draft-07/schema#',
			'type' => 'array',
			'items' => [
				'type' => 'string',
				'format' => 'number',
			],
		],
	]);

	// Activities
	createContentType('activity', 'Activity', 'Activity content type', [
		[
			'name' => 'field_activity_id',
			'type' => 'integer',
			'label' => 'Activity ID',
			'required' => true,
		],
		[
			'name' => 'field_activity_name',
			'type' => 'string',
			'label' => 'Activity Name',
			'required' => true,
		],
		[
			'name' => 'field_activity_description',
			'type' => 'text',
			'label' => 'Activity Description',
			'required' => true,
		],
		[
			'name' => 'field_activity_types',
			'type' => 'list_string',
			'label' => 'Activity Types',
			'required' => true,
			'settings' => [
				'allowed_values' => Mantle2Schemas::activityTypes(),
			],
			'cardinality' => 5,
		],
	]);

	// Events

	createContentType('event', 'Event', 'Event content type', [
		[
			'name' => 'field_host_id',
			'type' => 'integer',
			'label' => 'Host ID',
			'required' => true,
		],
		[
			'name' => 'field_event_name',
			'type' => 'string',
			'label' => 'Event Name',
			'required' => true,
			'settings' => [
				'max_length' => 255,
			],
		],
		[
			'name' => 'field_event_description',
			'type' => 'text_long',
			'label' => 'Event Description',
			'required' => true,
			'settings' => [
				'max_length' => 2048,
			],
		],
		[
			'name' => 'field_event_type',
			'type' => 'list_string',
			'label' => 'Event Type',
			'required' => true,
			'settings' => [
				'allowed_values' => array_map(fn($case) => $case->value, EventType::cases()),
			],
			'cardinality' => 1,
		],
		[
			'name' => 'field_event_activity_types',
			'type' => 'list_string',
			'label' => 'Activity Types',
			'required' => true,
			'settings' => [
				'allowed_values' => Mantle2Schemas::activityTypes(),
			],
			'cardinality' => 5,
		],
		[
			'name' => 'field_event_location_latitude',
			'type' => 'float',
			'label' => 'Location Latitude',
			'required' => false,
			'settings' => [
				'min' => -90,
				'max' => 90,
			],
		],
		[
			'name' => 'field_event_location_longitude',
			'type' => 'float',
			'label' => 'Location Longitude',
			'required' => false,
			'settings' => [
				'min' => -180,
				'max' => 180,
			],
		],
		[
			'name' => 'field_event_date',
			'type' => 'datetime',
			'label' => 'Date',
			'required' => true,
		],
		[
			'name' => 'field_event_enddate',
			'type' => 'datetime',
			'label' => 'End Date',
			'required' => false,
		],
	]);

	// Prompts

	createContentType('prompt', 'Prompt', 'Prompt content type', [
		[
			'name' => 'field_prompt',
			'type' => 'text_long',
			'label' => 'Prompt',
			'required' => true,
			'settings' => [
				'max_length' => 100,
			],
		],
		[
			'name' => 'field_owner_id',
			'type' => 'integer',
			'label' => 'Owner ID',
			'required' => true,
			'settings' => [
				'min' => 1,
			],
		],
		[
			'name' => 'field_visibility',
			'type' => 'list_string',
			'label' => 'Visibility',
			'required' => true,
			'settings' => [
				'allowed_values' => array_map(fn($case) => $case->value, Visibility::cases()),
			],
			'cardinality' => 1,
		],
	]);

	// Articles

	createContentType('article', 'Article', 'Article content type', [
		[
			'name' => 'field_article_id',
			'type' => 'string',
			'label' => 'Article ID',
			'required' => true,
			'settings' => [
				'max_length' => 255,
			],
		],
		[
			'name' => 'field_article_title',
			'type' => 'string',
			'label' => 'Title',
			'required' => true,
			'settings' => [
				'max_length' => 255,
			],
		],
		[
			'name' => 'field_article_description',
			'type' => 'text_long',
			'label' => 'Description',
			'required' => true,
		],
		[
			'name' => 'field_article_tags',
			'type' => 'json',
			'label' => 'Tags',
			'required' => false,
			'settings' => [
				'schema' => [
					'$schema' => 'http://json-schema.org/draft-07/schema#',
					'type' => 'array',
					'items' => [
						'type' => 'string',
					],
				],
			],
		],
		[
			'name' => 'field_article_content',
			'type' => 'text_long',
			'label' => 'Content',
			'required' => true,
		],
		[
			'name' => 'field_article_author',
			'type' => 'string',
			'label' => 'Author',
			'required' => true,
			'settings' => [
				'max_length' => 255,
			],
		],
		[
			'name' => 'field_author_id',
			'type' => 'string',
			'label' => 'Author ID',
			'required' => true,
			'settings' => [
				'max_length' => 255,
			],
		],
		[
			'name' => 'field_article_color',
			'type' => 'string',
			'label' => 'Color',
			'required' => false,
			'settings' => [
				'max_length' => 7,
			],
		],
		[
			'name' => 'field_created_at',
			'type' => 'datetime',
			'label' => 'Created At',
			'required' => true,
		],
		[
			'name' => 'field_updated_at',
			'type' => 'datetime',
			'label' => 'Updated At',
			'required' => false,
		],
		[
			'name' => 'field_ocean_article',
			'type' => 'json',
			'label' => 'Ocean Article',
			'required' => false,
			'settings' => [
				'schema' => [
					'$schema' => 'http://json-schema.org/draft-07/schema#',
					'type' => 'object',
					'properties' => [
						'title' => ['type' => 'string'],
						'author' => ['type' => 'string'],
						'source' => ['type' => 'string'],
						'url' => ['type' => 'string'],
						'abstract' => ['type' => 'string'],
						'content' => ['type' => 'string'],
						'theme_color' => ['type' => 'string'],
						'keywords' => [
							'type' => 'array',
							'items' => ['type' => 'string'],
						],
						'date' => ['type' => 'string'],
						'favicon' => ['type' => 'string'],
						'links' => [
							'type' => 'object',
							'additionalProperties' => ['type' => 'string'],
						],
					],
				],
			],
		],
	]);
}
