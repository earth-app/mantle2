<?php

use Drupal\comment\Entity\CommentType;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\node\Entity\NodeType;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\mantle2\Controller\Schema\Mantle2Schemas;
use Drupal\mantle2\Custom\AccountType;
use Drupal\mantle2\Custom\EventType;
use Drupal\mantle2\Custom\Visibility;
use Drupal\mantle2\Service\UsersHelper;

function createField(
	string $entity,
	string $name,
	string $type,
	string $label,
	bool $required = false,
	$default_value = null,
	array $settings = [],
	array $constraints = [],
	int $cardinality = 1,
	?string $bundle = null,
): void {
	// If no bundle is provided, default to entity (e.g., user entity uses 'user' bundle).
	$bundle = $bundle ?? $entity;
	if (!FieldStorageConfig::loadByName($entity, $name)) {
		try {
			FieldStorageConfig::create([
				'field_name' => $name,
				'entity_type' => $entity,
				'type' => $type,
				'cardinality' => $cardinality,
				'settings' => $settings,
			])->save();
		} catch (EntityStorageException $e) {
			Drupal::logger('mantle2')->error(
				'Failed to save field constraints for %field: %message',
				[
					'%field' => $name,
					'%message' => $e->getMessage(),
				],
			);
		}
	}

	if (!FieldConfig::loadByName($entity, $bundle, $name)) {
		try {
			FieldConfig::create([
				'field_name' => $name,
				'entity_type' => $entity,
				'bundle' => $bundle,
				'label' => $label,
				'required' => $required,
			])->save();
		} catch (EntityStorageException $e) {
			Drupal::logger('mantle2')->error(
				'Failed to save field constraints for %field: %message',
				[
					'%field' => $name,
					'%message' => $e->getMessage(),
				],
			);
		}
	}

	// Ensure instance-level settings like default values and constraints are saved.
	$field = FieldConfig::load("$entity.$bundle.$name");
	if ($field) {
		if ($default_value !== null) {
			$prepared_default = is_array($default_value)
				? $default_value
				: [['value' => $default_value]];
			$field->set('default_value', $prepared_default);
		}
		if ($constraints) {
			$field->setSetting('constraints', $constraints);
		}
		try {
			$field->save();
		} catch (EntityStorageException $e) {
			Drupal::logger('mantle2')->error(
				'Failed to save field configuration for %field: %message',
				[
					'%field' => $name,
					'%message' => $e->getMessage(),
				],
			);
		}
	}
}

/**
 * Ensure all fields are visible in the default form display for a bundle.
 */
function mantle2_ensure_form_display(string $entity_type, string $bundle): void
{
	/** @var \Drupal\Core\Entity\Entity\EntityFormDisplay $display */
	$display = EntityFormDisplay::load("$entity_type.$bundle.default");
	if (!$display) {
		$display = EntityFormDisplay::create([
			'targetEntityType' => $entity_type,
			'bundle' => $bundle,
			'mode' => 'default',
			'status' => true,
		]);
	}
	$display->setStatus(true);

	// Load all field instances for this bundle.
	$field_instances = \Drupal::entityTypeManager()
		->getStorage('field_config')
		->loadByProperties(['entity_type' => $entity_type, 'bundle' => $bundle]);

	$weight = 0;
	foreach ($field_instances as $field_config) {
		/** @var \Drupal\field\Entity\FieldConfig $field_config */
		$name = $field_config->getName();
		$type = $field_config->getType();

		$component = $display->getComponent($name) ?? [];
		$widget = getWidgetType($type);
		if ($type === 'json') {
			$widget = 'json_textarea';
		}

		$display->setComponent(
			$name,
			$component + [
				'type' => $widget,
				'weight' => $weight++,
				'settings' => $component['settings'] ?? [],
				'region' => 'content',
			],
		);
	}

	try {
		$display->save();
	} catch (EntityStorageException $e) {
		Drupal::logger('mantle2')->error('Failed to save form display for %bundle: %message', [
			'%bundle' => "$entity_type.$bundle",
			'%message' => $e->getMessage(),
		]);
	}
}

function createContentType(string $name, string $label, string $description, array $fields): void
{
	// Ensure the content type (bundle) exists.
	$existing = NodeType::load($name);
	if (!$existing) {
		$type = NodeType::create([
			'type' => $name,
			'name' => $label,
			'description' => $description,
		]);
		try {
			$type->save();
		} catch (EntityStorageException $e) {
			Drupal::logger('mantle2')->error('Failed to save content type %type: %message', [
				'%type' => $name,
				'%message' => $e->getMessage(),
			]);
		}
	}

	// Add fields to the 'node' entity for this bundle.
	foreach ($fields as $field) {
		createField(
			'node', // Correct entity type for nodes
			$field['name'],
			$field['type'],
			$field['label'],
			$field['required'] ?? false,
			$field['default_value'] ?? null,
			$field['settings'] ?? [],
			$field['constraints'] ?? [],
			$field['cardinality'] ?? 1,
			$name, // bundle: machine name of the content type
		);
	}

	// Configure form display to make fields visible on add/edit forms
	$form_display = EntityFormDisplay::load("node.$name.default");
	if (!$form_display) {
		$form_display = EntityFormDisplay::create([
			'targetEntityType' => 'node',
			'bundle' => $name,
			'mode' => 'default',
			'status' => true,
		]);
	}
	$form_display->setStatus(true);

	// Set up form display for each field
	foreach ($fields as $index => $field) {
		$field_name = $field['name'];
		$field_type = $field['type'];

		// Configure widget based on field type
		$widget_config = [
			'type' => getWidgetType($field_type),
			'weight' => $index,
			'settings' => [],
			'region' => 'content',
		];

		// Add specific widget settings based on field type
		if ($field_type === 'datetime') {
			$widget_config['settings']['datetime_type'] = 'datetime';
		} elseif ($field_type === 'list_string') {
			$widget_config['type'] = 'options_select';
		} elseif ($field_type === 'json') {
			$widget_config['type'] = 'json_textarea';
		}

		$form_display->setComponent($field_name, $widget_config);
	}

	try {
		$form_display->save();
	} catch (EntityStorageException $e) {
		Drupal::logger('mantle2')->error('Failed to save form display for %type: %message', [
			'%type' => $name,
			'%message' => $e->getMessage(),
		]);
	}

	// Ensure any fields not explicitly configured above are still made visible.
	mantle2_ensure_form_display('node', $name);
}

function getWidgetType(string $field_type): string
{
	$widget_map = [
		'string' => 'string_textfield',
		'integer' => 'number',
		'float' => 'number',
		'text' => 'text_textarea',
		'text_long' => 'text_textarea',
		'datetime' => 'datetime_default',
		'list_string' => 'options_select',
		'json' => 'json_textarea',
		'entity_reference' => 'entity_reference_autocomplete',
	];

	return $widget_map[$field_type] ?? 'string_textfield';
}

/** @noinspection PhpUnused */
function mantle2_install(): void
{
	// User Fields

	/// Visibility
	createField('user', 'field_visibility', 'list_string', 'Visibility', true, null, [
		'allowed_values' => array_map(fn($case) => $case->value, Visibility::cases()),
	]);

	/// Field Privacy
	createField(
		'user',
		'field_privacy',
		'json',
		'Field Privacy',
		true,
		json_encode(UsersHelper::$defaultPrivacy),
		[
			'schema' => Mantle2Schemas::userFieldPrivacyJson(),
		],
	);

	/// First Name
	createField('user', 'field_first_name', 'string', 'First Name', false, '', [
		'max_length' => 50,
	]);

	/// Last Name
	createField('user', 'field_last_name', 'string', 'Last Name', false, '', [
		'max_length' => 50,
	]);

	/// Bio
	createField('user', 'field_bio', 'text_long', 'Biography', false, '', [
		'max_length' => 700,
	]);

	/// Phone Number
	createField(
		'user',
		'field_phone',
		'integer',
		'Phone Number',
		false,
		0,
		[
			'min' => 10000,
			'max' => 9999999999,
		],
		[
			'Regex' => [
				'pattern' => '/^\+?[0-9]{7,15}$/',
				'message' => 'Enter a valid phone number.',
			],
		],
	);

	/// Country
	createField(
		'user',
		'field_country',
		'string',
		'Country',
		false,
		'US',
		[
			'max_length' => 2,
		],
		[
			'Regex' => [
				'pattern' => '[A-Z]{2}',
				'message' => 'Enter a valid country code.',
			],
		],
	);

	/// Address
	createField('user', 'field_address', 'string', 'Address', false, '', [
		'max_length' => 255,
	]);

	/// Activities
	createField('user', 'field_activities', 'json', 'Activities', false, json_encode([]), [
		'schema' => [
			'$schema' => 'http://json-schema.org/draft-07/schema#',
			'type' => 'array',
			'items' => [
				'type' => 'string',
				'format' => 'number',
			],
		],
	]);

	/// Friends
	createField('user', 'field_friends', 'json', 'Friends', false, json_encode([]), [
		'schema' => [
			'$schema' => 'http://json-schema.org/draft-07/schema#',
			'type' => 'array',
			'items' => [
				'type' => 'string',
				'format' => 'number',
			],
		],
	]);

	/// Circle
	createField('user', 'field_circle', 'json', 'Circle', false, json_encode([]), [
		'schema' => [
			'$schema' => 'http://json-schema.org/draft-07/schema#',
			'type' => 'array',
			'items' => [
				'type' => 'string',
				'format' => 'number',
			],
		],
	]);

	/// Account Type
	createField('user', 'field_account_type', 'list_string', 'Account Type', true, 'FREE', [
		'allowed_values' => array_map(fn($case) => $case->value, AccountType::cases()),
	]);

	// Make sure the user form display shows all custom fields on fresh install.
	mantle2_ensure_form_display('user', 'user');

	// Activities

	createContentType('activity', 'Activity', 'Activity content type', [
		[
			'name' => 'field_activity_id',
			'type' => 'string',
			'label' => 'Activity ID',
			'required' => true,
		],
		[
			'name' => 'field_activity_name',
			'type' => 'string',
			'label' => 'Activity Name',
			'required' => true,
		],
		[
			'name' => 'field_activity_description',
			'type' => 'text',
			'label' => 'Activity Description',
			'required' => true,
		],
		[
			'name' => 'field_activity_types',
			'type' => 'list_string',
			'label' => 'Activity Types',
			'required' => true,
			'settings' => [
				'allowed_values' => Mantle2Schemas::activityTypes(),
			],
			'cardinality' => 5,
		],
		[
			'name' => 'field_activity_aliases',
			'type' => 'json',
			'label' => 'Activity Aliases',
			'required' => false,
			'settings' => [
				'schema' => [
					'$schema' => 'http://json-schema.org/draft-07/schema#',
					'type' => 'array',
					'items' => [
						'type' => 'string',
					],
				],
			],
		],
		[
			'name' => 'field_activity_fields',
			'type' => 'json',
			'label' => 'Activity Fields',
			'required' => false,
		],
	]);

	// Events

	createContentType('event', 'Event', 'Event content type', [
		[
			'name' => 'field_host_id',
			'type' => 'integer',
			'label' => 'Host ID',
			'required' => true,
		],
		[
			'name' => 'field_event_name',
			'type' => 'string',
			'label' => 'Event Name',
			'required' => true,
			'settings' => [
				'max_length' => 255,
			],
		],
		[
			'name' => 'field_event_description',
			'type' => 'text_long',
			'label' => 'Event Description',
			'required' => true,
			'settings' => [
				'max_length' => 2048,
			],
		],
		[
			'name' => 'field_event_type',
			'type' => 'list_string',
			'label' => 'Event Type',
			'required' => true,
			'settings' => [
				'allowed_values' => array_map(fn($case) => $case->value, EventType::cases()),
			],
			'cardinality' => 1,
		],
		[
			'name' => 'field_event_activity_types',
			'type' => 'list_string',
			'label' => 'Activity Types',
			'required' => true,
			'settings' => [
				'allowed_values' => Mantle2Schemas::activityTypes(),
			],
			'cardinality' => 5,
		],
		[
			'name' => 'field_event_location_latitude',
			'type' => 'float',
			'label' => 'Location Latitude',
			'required' => false,
			'settings' => [
				'min' => -90,
				'max' => 90,
			],
		],
		[
			'name' => 'field_event_location_longitude',
			'type' => 'float',
			'label' => 'Location Longitude',
			'required' => false,
			'settings' => [
				'min' => -180,
				'max' => 180,
			],
		],
		[
			'name' => 'field_event_date',
			'type' => 'datetime',
			'label' => 'Date',
			'required' => true,
		],
		[
			'name' => 'field_event_enddate',
			'type' => 'datetime',
			'label' => 'End Date',
			'required' => false,
		],
	]);

	// Prompts

	createContentType('prompt', 'Prompt', 'Prompt content type', [
		[
			'name' => 'field_prompt',
			'type' => 'text_long',
			'label' => 'Prompt',
			'required' => true,
			'settings' => [
				'max_length' => 100,
			],
		],
		[
			'name' => 'field_owner_id',
			'type' => 'integer',
			'label' => 'Owner ID',
			'required' => true,
			'settings' => [
				'min' => 1,
			],
		],
		[
			'name' => 'field_visibility',
			'type' => 'list_string',
			'label' => 'Visibility',
			'required' => true,
			'settings' => [
				'allowed_values' => array_map(fn($case) => $case->value, Visibility::cases()),
			],
			'cardinality' => 1,
		],
	]);

	// Articles

	createContentType('article', 'Article', 'Article content type', [
		[
			'name' => 'field_article_id',
			'type' => 'string',
			'label' => 'Article ID',
			'required' => true,
			'settings' => [
				'max_length' => 255,
			],
		],
		[
			'name' => 'field_article_title',
			'type' => 'string',
			'label' => 'Title',
			'required' => true,
			'settings' => [
				'max_length' => 255,
			],
		],
		[
			'name' => 'field_article_description',
			'type' => 'text_long',
			'label' => 'Description',
			'required' => true,
		],
		[
			'name' => 'field_article_tags',
			'type' => 'json',
			'label' => 'Tags',
			'required' => false,
			'settings' => [
				'schema' => [
					'$schema' => 'http://json-schema.org/draft-07/schema#',
					'type' => 'array',
					'items' => [
						'type' => 'string',
					],
				],
			],
		],
		[
			'name' => 'field_article_content',
			'type' => 'text_long',
			'label' => 'Content',
			'required' => true,
		],
		[
			'name' => 'field_article_author',
			'type' => 'string',
			'label' => 'Author',
			'required' => true,
			'settings' => [
				'max_length' => 255,
			],
		],
		[
			'name' => 'field_author_id',
			'type' => 'string',
			'label' => 'Author ID',
			'required' => true,
			'settings' => [
				'max_length' => 255,
			],
		],
		[
			'name' => 'field_article_color',
			'type' => 'string',
			'label' => 'Color',
			'required' => false,
			'settings' => [
				'max_length' => 7,
			],
		],
		[
			'name' => 'field_created_at',
			'type' => 'datetime',
			'label' => 'Created At',
			'required' => true,
		],
		[
			'name' => 'field_updated_at',
			'type' => 'datetime',
			'label' => 'Updated At',
			'required' => false,
		],
		[
			'name' => 'field_ocean_article',
			'type' => 'json',
			'label' => 'Ocean Article',
			'required' => false,
			'settings' => [
				'schema' => [
					'$schema' => 'http://json-schema.org/draft-07/schema#',
					'type' => 'object',
					'properties' => [
						'title' => ['type' => 'string'],
						'author' => ['type' => 'string'],
						'source' => ['type' => 'string'],
						'url' => ['type' => 'string'],
						'abstract' => ['type' => 'string'],
						'content' => ['type' => 'string'],
						'theme_color' => ['type' => 'string'],
						'keywords' => [
							'type' => 'array',
							'items' => ['type' => 'string'],
						],
						'date' => ['type' => 'string'],
						'favicon' => ['type' => 'string'],
						'links' => [
							'type' => 'object',
							'additionalProperties' => ['type' => 'string'],
						],
					],
				],
			],
		],
	]);
}

/**
 * Update: Ensure node bundle form displays include all fields and are enabled.
 */
function mantle2_update_9001(): void
{
	foreach (['activity', 'event', 'prompt', 'article'] as $bundle) {
		mantle2_ensure_form_display('node', $bundle);
	}
}

/**
 * Update: Ensure user form display includes custom fields and is enabled.
 */
function mantle2_update_9002(): void
{
	mantle2_ensure_form_display('user', 'user');
}

/**
 * Update: Add Event Attendees Field, Field Visibility for Nodes
 */
function mantle2_update_9003(): void
{
	createField(
		'node',
		'field_event_attendees',
		'entity_reference',
		'Event Attendees',
		true,
		null,
		[
			'target_type' => 'user',
		],
		[],
		-1,
		'event',
	);
	mantle2_ensure_form_display('node', 'event');

	createField('node', 'field_visibility', 'list_string', 'Visibility', true, null, [
		'allowed_values' => array_map(fn($case) => $case->value, Visibility::cases()),
	]);
	mantle2_ensure_form_display('node', 'event');
}

/**
 * Update: Add comments for prompts and articles
 */
function mantle2_update_9004(): void
{
	if (!CommentType::load('comment')) {
		CommentType::create([
			'id' => 'comment',
			'label' => 'Comment',
			'target_entity_type_id' => 'node',
		])->save();
	}

	createField('node', 'comment', 'comment', 'Comments', false, null, [
		'comment_type' => 'comment',
		'cardinality' => -1,
	]);
	mantle2_ensure_form_display('node', 'prompt');
	mantle2_ensure_form_display('node', 'article');
}
